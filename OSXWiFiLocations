#!/usr/bin/env bash

# config
LOGS_PATH=$HOME/Library/Logs/osxwifilocations.log
DEFAULT_NETWORK_LOCATION=Automatic
CONFIG_DIR=$HOME/.osx-wifi-locations
ALIAS_CFG_PATH=$CONFIG_DIR/alias.conf
MAX_LOG_SIZE_MB=10
MAX_RETRIES=3
RETRY_DELAY=1

# verbose levels - set to true for detailed logging
VERBOSE=false

# reset log file if size > MAX_LOG_SIZE_MB
rotate_logs() {
    local size=$(stat -f%z "$LOGS_PATH" 2>/dev/null || echo "0")
    local max_size=$((MAX_LOG_SIZE_MB * 1024 * 1024))
    
    if [ "$size" -gt "$max_size" ]; then
        mv "$LOGS_PATH" "$LOGS_PATH.old"
        touch "$LOGS_PATH"
        log "Log file rotated due to size > ${MAX_LOG_SIZE_MB}MB"
    fi
}

# logging
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date +"[%Y-%m-%d %H:%M:%S]")

    case $level in
        "ERROR" | "INFO")
            echo -e "$timestamp [$level] $message" >> "$LOGS_PATH"
            ;;
        "DEBUG")
            [ "$VERBOSE" = true ] && echo -e "$timestamp [DEBUG] $message" >> "$LOGS_PATH"
            ;;
    esac
}

# attempts to switch location, fails after MAX_RETRIES attempts
switch_location() {
    local target_location=$1
    local attempts=0
    local success=false

    while [ $attempts -lt $MAX_RETRIES ] && [ "$success" = false ]; do
        if networksetup -switchtolocation "$target_location" 2>/dev/null; then
            success=true
            log "INFO" "Successfully switched to location: '$target_location' (attempt $((attempts + 1)))"
        else
            attempts=$((attempts + 1))
            log "ERROR" "Failed to switch location (attempt $attempts)"
            sleep $RETRY_DELAY
        fi
    done

    if [ "$success" = false ]; then
        log "ERROR" "Failed to switch location after $MAX_RETRIES attempts"
        return 1
    fi

    return 0
}

# gets current network
get_wifi_name() {
    local wifi_name=""
    local attempts=0

    while [ -z "$wifi_name" ] && [ $attempts -lt $MAX_RETRIES ]; do
        wifi_name=$(ipconfig getsummary en0 | awk -F ' SSID : ' '/ SSID : / {print $2}')
        [ -z "$wifi_name" ] && {
            attempts=$((attempts + 1))
            sleep $RETRY_DELAY
        }
    done

    echo "$wifi_name"
}

# check and execute location/wifi script(s)
exec_location_script() {
    local location=$1
    local script_file="$CONFIG_DIR/$location"

    log "DEBUG" "Finding script for '$location'"

    if [ -f "$script_file" ]; then
        log "INFO" "Executing script '$script_file'"
        chmod +x "$script_file"
        "$script_file"
    else
        log "DEBUG" "No script for '$location' found"
    fi
}

main() {
    # create log file if it doesn't exist
    touch "$LOGS_PATH"

    # check log size and rotate if necessary
    rotate_logs

    sleep 3 # sleep to ensure descriptors and logs are ready

    # fetch SSID
    local wifi_name
    wifi_name=$(get_wifi_name)
    [ -z "$wifi_name" ] && {
        log "ERROR" "Failed to get WiFi name"
        exit 1
    }
    log "INFO" "Connected WiFi: '$wifi_name'"

    # get network locations
    local network_locations
    network_locations=$(networksetup -listlocations | xargs)
    log "DEBUG" "Available Network Locations: $network_locations"

    # get current network location
    local current_location
    current_location=$(networksetup -getcurrentlocation)
    log "DEBUG" "Current Network Location: '$current_location'"

    # check for alias locations
    local target_location="$wifi_name"
    if [ -f "$ALIAS_CFG_PATH" ]; then
        log "DEBUG" "Reading alias configuration at '$ALIAS_CFG_PATH'"
        local alias_location
        alias_location=$(grep "^$wifi_name=" "$ALIAS_CFG_PATH" | sed -nE 's/.*=(.*)/\1/p')
        [ -n "$alias_location" ] && target_location="$alias_location"
    fi

    # verify location
    local is_valid_location
    is_valid_location=$(echo "$network_locations" | grep -w "$target_location" && echo "true" || echo "false")

    if [ "$is_valid_location" = "false" ]; then
        log "INFO" "Target location invalid, using default: '$DEFAULT_NETWORK_LOCATION'"
        target_location="$DEFAULT_NETWORK_LOCATION"
    fi

    # switch location, execute scripts if any
    [ "$target_location" != "$current_location" ] && {
        switch_location "$target_location" && exec_location_script "$target_location"
    } || {
        log "DEBUG" "No location switch required"
    }
}

# mainy mcmainface
main